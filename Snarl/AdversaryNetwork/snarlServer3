#!/usr/bin/env python3
#
# snarlServer3 (python3 executable)
# authors: Michael Curley & Drake Moore
# notes:
#   - this is just a copy of the original snarlServer, except now the
#     registerPlayers function is more abstract and allows registering both
#     players and adversaries
#

from actor import Zombie
from argparse import ArgumentParser, ArgumentTypeError, Namespace
from controller import Controller, LocalGhostController, LocalZombieController, SingleLocalObserverController
from gameManager import GameManager
from levelManagerBuilder import LevelManagerBuilder
from levelManager import LevelManager
from json import loads, dumps
from serverController import ServerController
from signal import alarm, signal, SIGALRM
from snarlParser import SnarlParser
from socket import socket, AF_INET, SOCK_STREAM, timeout as SocketTimeout
from time import sleep


def main():
    # sig handler for linux processes, for our case only need the alarm handler
    def timeoutError(signum, frame):
        raise TimeoutError
    signal(SIGALRM, timeoutError)
    args = parseArguments()
    levels = parseLevels(args.levels)
    levelBuilders = registerLevels(levels)
    with createSocket(args.address, args.port, args.wait) as soc:
        try:
            adversaries = registerActors(levelBuilders, args.players, args.adversaries, soc, args.wait)
            registerRemainingAdversaries(levelBuilders, adversaries)
            if args.observe:
                registerObservers(levelBuilders)
            levelManagers = randomizeStartPointsAndCreateManagers(levelBuilders)
            gameManager = GameManager(levelManagers)
            gameManager.run()
        except Exception as e:
            print(f'Server {type(e)}: {e}')


# ----- argument parsing -------------------------------------------------------

def parseArguments() -> Namespace:
    """ returns a Namespace containing the command line arguments, additional
    verification is required for arguments that interact with each other """
    ap = ArgumentParser(description = 'start a snarl server')
    ap.add_argument('--levels', metavar = 'FILE', type = str, default = 'snarl.levels',
            help = 'where FILE is the name of a file containing JSON level specifications')
    ap.add_argument('--players', metavar = 'N', type = playersType, default = 4,
            help = 'where {0} <= N <= {1} is the number of player clients'.format(
                LevelManager.MinPlayers, LevelManager.MaxPlayers))
    ap.add_argument('--adversaries', metavar = 'N', type = adversariesType, default = 0,
            help = 'where N <= {0} is the number of adversary clients'.format(
                LevelManager.MaxPlayers))
    ap.add_argument('--wait', metavar = 'N', type = waitType, default = 60,
            help = 'where N is the number of seconds to wait for the next client to connect (determines reg_timeout)')
    ap.add_argument('--observe', action = 'store_true',
            help = 'will start a local observer to display the progress of the game')
    ap.add_argument('--address', metavar = 'IP', type = str, default = '127.0.0.1',
            help = 'where IP is an IP address on which the server should listen for connections')
    ap.add_argument('--port', metavar = 'NUM', type = int, default = 45678,
            help = 'where NUM is the port number the server will listen on')
    return ap.parse_args()

def playersType(n):
    """ represents a type for player clients, ensures the number is valid """
    n = int(n)
    low = LevelManager.MinPlayers
    high = LevelManager.MaxPlayers
    if n < low or n > high:
        raise ArgumentTypeError('player client count must be between {0} and {1}'.format(
            low, high))
    return n

def adversariesType(n):
    """ represents a type for adversary clients, ensures the number is valid """
    n = int(n)
    high = LevelManager.MaxPlayers
    if n < 0 or n > high:
        raise ArgumentTypeError('adversary client count must be between 0 and {0}'.format(
            high))
    return n

def waitType(n):
    """ represents a type for wait time, ensures the number is valid """
    n = int(n)
    if n < 1:
        raise ArgumentTypeError('a game cannot wait 0 seconds for a client to join')
    return n

def parseLevels(fileName: str) -> list:
    """ parses the input file for a list of json levels and returns a list of
    (level, keyLocation, exitLocation) """
    n = None
    acc = ''
    levels = list()
    with open(fileName, 'r') as f:
        for line in f.readlines():
            acc += line
            try:
                fJson = loads(acc)
                if isinstance(fJson, int) and n is None:
                    n = fJson
                else: # level
                    lp = SnarlParser(fJson)
                    levels.append((lp.level, lp.keyLocation, lp.exitLocation))
                acc = ''
            except:
                continue
    if n != len(levels):
        raise ValueError('input json file given invalid level count')
    return levels


# ----- game init --------------------------------------------------------------

def registerLevels(levels: list) -> list:
    """ adds the level information to new builders and returns them """
    return [LevelManagerBuilder(
        ).addLevelComponent(level
        ).setKeyLocation(keyLoc
        ).setExitLocation(exitLoc)
        for level, keyLoc, exitLoc in levels]

def createSocket(address: str, port: int, wait: int) -> socket:
    """ creates a socket instance to return """
    s = socket(AF_INET, SOCK_STREAM)
    s.settimeout(wait)
    s.bind((address, port))
    return s

def registerActors(levelBuilders: list, players: int, adversaries: int, soc: socket, timeout: int) -> list:
    """ registers local players/adversaries with the builders, returns (zombies, ghosts) """
    bldr = LevelManagerBuilder()
    playerId = 0
    zombieId = 0
    ghostId = 0
    for i in range(players + adversaries):
        try:
            connection, t, controller = acceptClient(soc, timeout)
            actorType = t.lower()
            if actorType == 'player':
                checkClientNumber(playerId, players, 'players')
            else:
                checkClientNumber(zombieId + ghostId, adversaries, 'adversaries')
        except SocketTimeout:
            print(f'Client {i} failed to connect in time.')
            continue
        while 1:
            sleep(1)
            connection.sendall(dumps('name').encode())
            name = loads(connection.recv(1024).decode())
            try:
                if actorType == 'player':
                    bldr.registerPlayer(str(playerId), name, controller = controller)
                    playerId += 1
                elif actorType in ['zombie', 'ghost']:
                    if actorType == 'zombie':
                        advId = zombieId
                        zombieId += 1
                    else:
                        advId = ghostId
                        ghostId += 1
                    bldr.registerAdversary(actorType, actorType + str(advId), controller = controller)
                else:
                    continue
                break
            except ValueError as e:
                print(e)
    for levelBuilder in levelBuilders:
        levelBuilder.players = list(bldr.players)
        levelBuilder.adversaries = list(bldr.adversaries)
    return bldr.adversaries

def acceptClient(soc: socket, timeout: int) -> (any, str, ServerController):
    """ returns a server controller after accepting a client """
    soc.listen()
    connection, _ = soc.accept()
    connection.sendall(dumps({
        'type': 'welcome',
        'info': 'Lonande'
    }).encode())
    alarm(10)
    try:
        actorType = loads(connection.recv(64).decode())
    except TimeoutError:
        actorType = 'player'
    finally:
        alarm(0)
    return connection, actorType, ServerController(connection,
            # backwards compatible, only use new anchoring protocol if its not a player
            useLayoutAnchor = actorType != 'player')

def checkClientNumber(numClients: int, clientMax: int, clientType: str):
    """ raises runtime error if numClients exceeds clientMax """
    if numClients >= clientMax:
        raise RuntimeError(f'More than {clientMax} {clientType} tried to register.')

def registerRemainingAdversaries(builders: list, adversaries: list):
    """ registers local adversaries with the builders """
    level = 1
    zombieCount = len([z for z in adversaries if isinstance(z, Zombie)])
    ghostCount = len(adversaries) - zombieCount
    for builder in builders:
        for i in range(max(int((float(level) / 2.0) + 1.0) - zombieCount, 0)):
            registerAdversary(builder, 'zombie', i + zombieCount, LocalZombieController())
        for i in range(max(int((float(level) - 1.0) / 2.0) - ghostCount, 0)):
            registerAdversary(builder, 'ghost', i + ghostCount, LocalGhostController())
        level += 1

def registerAdversary(builder: LevelManagerBuilder, advType: str, i: int, controller: Controller):
    """ registers an adversary with the builder """
    builder.registerAdversary(advType, advType + str(i), controller = controller)

def registerObservers(builders: list):
    """ registers an observer with each builder """
    for builder in builders:
        builder.registerObserver('mainObserver', SingleLocalObserverController())

def randomizeStartPointsAndCreateManagers(builders: list) -> list:
    """ builds each builder in a returned list """
    return [b.setRandomStartingPoints(True).build() for b in builders]


# ----- main entry -------------------------------------------------------------

if __name__ == '__main__':
    main()


# ----- end of file ------------------------------------------------------------





